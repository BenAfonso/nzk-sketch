{"version":3,"file":"example.min.js","sources":["../src/nzk-sketch.js","../src/example.js"],"sourcesContent":["export default class NZKSketch {\n  constructor(props = {}) {\n    if(!props.containerEl){\n      throw new Error(\"NZKSketch needs to be instantiated with a containerEl\")\n    }\n\n    this.containerEl = props.containerEl\n    this.template = props.template\n\n    this.scale = window.devicePixelRatio >= 1.5 ? 2 : 1\n\n    console.log(this)\n\n    this.initTouchLayer()\n  }\n\n  initTouchLayer() {\n    this.touchLayerEl = document.createElement('div')\n\n    this.touchLayerEl.style.width = '100%'\n    this.touchLayerEl.style.height = '100%'\n\n    this.onStartMouseDraw = this.onStartMouseDraw.bind(this)\n    this.onMoveMouseDraw = this.onMoveMouseDraw.bind(this)\n    this.onEndMouseDraw = this.onEndMouseDraw.bind(this)\n\n    this.touchLayerEl.addEventListener(\"mousedown\", this.onStartMouseDraw, false)\n    this.touchLayerEl.addEventListener(\"mousemove\", this.onMoveMouseDraw, false)\n    this.touchLayerEl.addEventListener(\"mouseup\", this.onEndMouseDraw, false)\n\n    this.onStartTouchDraw = this.onStartTouchDraw.bind(this)\n    this.onMoveTouchDraw = this.onMoveTouchDraw.bind(this)\n    this.onEndTouchDraw = this.onEndTouchDraw.bind(this)\n\n    this.touchLayerEl.addEventListener(\"touchstart\", this.onStartTouchDraw, false)\n    this.touchLayerEl.addEventListener(\"touchmove\", this.onMoveTouchDraw, false)\n    this.touchLayerEl.addEventListener(\"touchend\", this.onEndTouchDraw, false)\n\n    this.containerEl.appendChild(this.touchLayerEl)\n  }\n\n  getMousePoint (ev) {\n    let rect = this.touchLayerEl.getBoundingClientRect()\n\n    return {\n      x: (ev.clientX - rect.left) * this.scale,\n      y: (ev.clientY - rect.top) * this.scale\n    }\n  }\n\n  getTouchPoint (ev) {\n    let rect = this.touchLayerEl.getBoundingClientRect()\n\n    return {\n      x: (ev.touches[0].clientX - rect.left) * this.scale,\n      y: (ev.touches[0].clientY - rect.top) * this.scale\n    }\n  }\n\n  onStartMouseDraw(ev) {\n    ev.preventDefault() // prevents scroll\n    this.startDraw(this.getMousePoint(ev))\n  }\n\n  onStartTouchDraw(ev) {\n    ev.preventDefault() // prevents scroll\n    this.startDraw(this.getTouchPoint(ev))\n  }\n\n  onMoveMouseDraw(ev) {\n    this.continueDraw(this.getMousePoint(ev))\n  }\n\n  onMoveTouchDraw(ev) {\n    this.continueDraw(this.getTouchPoint(ev))\n  }\n\n  onEndMouseDraw(ev) {\n    this.endDraw(this.getMousePoint(ev))\n  }\n\n  onEndTouchDraw(ev) {\n    this.endDraw(this.getTouchPoint(ev))\n  }\n\n  startDraw(point) {\n    console.log(\"Start draw at:\", point)\n  }\n\n  continueDraw(point) {\n    console.log(\"Continue draw at:\", point)\n  }\n\n  endDraw(point) {\n    console.log(\"End draw at:\", point)\n  }\n}\n\n// module.exports = BaseView.extend\n\n// \tsession:\n// \t\tmodel: 'object'\n// \t\twidth: 'number'\n// \t\theight: 'number'\n// \t\tscale: 'number'\n// \t\tleft:\n// \t\t\ttype: 'string'\n// \t\t\tdefault: '50%'\n// \t\ttop:\n// \t\t\ttype: 'string'\n// \t\t\tdefault: '0px'\n// \t\tposition:\n// \t\t\ttype: 'string'\n// \t\t\tdefault: 'relative'\n// \t\ttransform:\n// \t\t\ttype: 'string'\n// \t\t\tdefault: 'translateX(-50%)'\n// \t\tratio:\n// \t\t\ttype: 'number'\n// \t\t\tdefault: -> 1024/768\n// \t\tcanvasWidth: 'number'\n// \t\tcanvasHeight: 'number'\n// \t\tcanvasWidthScaled: 'number'\n// \t\tcanvasHeightScaled: 'number'\n// \t\tblueprint: 'string'\n// \t\tbigBlueprint: 'string'\n// \t\tparentEl: 'object'\n// \t\tforegroundImage: 'string'\n// \t\thidePaper:\n// \t\t\ttype: 'boolean'\n// \t\t\tdefault: false\n// \t\tenableUploader:\n// \t\t\ttype: 'boolean'\n// \t\t\tdefault: false\n// \t\ttoolsTimeout:\n// \t\t\ttype: 'number'\n// \t\t\tdefault: 0\n// \t\treqStroke:\n// \t\t\ttype: 'number'\n// \t\t\tdefault: 0\n// \t\tdisabledTools:\n// \t\t\ttype: 'array'\n// \t\t\tdefault: -> []\n// \t\timportedImage: 'any'\n// \t\tonUploadResult: 'function'\n// \t\ttoolsHidden: true\n\n// \tevents:\n// \t\t'touchstart .interaction-layer': 'startTouchDrawing'\n// \t\t'touchmove .interaction-layer': 'continueTouchDrawing'\n// \t\t'touchend .interaction-layer': 'endDrawing'\n// \t\t'mousedown .interaction-layer': 'startClickDrawing'\n// \t\t'mousemove .interaction-layer': 'continueClickDrawing'\n// \t\t'mouseup .interaction-layer': 'endDrawing'\n// \t\t'mousedown #sketch-swatches': 'stopEvent'\n// \t\t'touchstart #sketch-swatches': 'stopEvent'\n\n// \ttemplate: -> \"\"\"\n// \t\t<div id='sketch-view'#{if @hidePaper then \"class='hide-paper'\" else ''}>\n// \t\t\t#{@innerTemplate()}\n// \t\t</div>\n// \t\t\"\"\"\n\n// \tinnerTemplate: -> \"\"\"\n// \t\t#{@paperTemplate()}\n// \t\t#{@blueprintTemplate()}\n// \t\t#{@canvasTemplate()}\n// \t\t#{@foregroundTemplate()}\n// \t\t#{@interactionTemplate()}\n// \t\t\"\"\"\n\n// \tpaperTemplate: -> \"\"\"\n// \t\t<div data-hook='sketch-papers' id='back-paper' class=\"sketch-paper\" style='height: #{@canvasHeight}px; width: #{@canvasWidth}px;'></div>\n// \t\t<div data-hook='sketch-papers' id='middle-paper' class=\"sketch-paper\" style='height: #{@canvasHeight}px; width: #{@canvasWidth}px;'></div>\n// \t\t<div data-hook='sketch-papers' id='front-paper' class=\"sketch-paper\" style='height: #{@canvasHeight}px; width: #{@canvasWidth}px;'></div>\n// \t\t\"\"\"\n\n// \tblueprintTemplate: -> \"\"\"\n// \t\t<div id='blueprint' class=\"sketch-paper\" style='height:#{@canvasHeight}px; width:#{@canvasWidth}px;#{if @bigBlueprint then 'background-image: url(' + @bigBlueprint + ')' else ''}'>\n// \t\t\t<div style='#{if @blueprint then 'background-image: url(' + @blueprint + ')' else ''}'></div>\n// \t\t</div>\n// \t\t\"\"\"\n\n// \tcanvasTemplate: -> \"\"\"\n// \t\t<canvas data-hook='cut-canvas' id='cut-canvas' class='sketch-paper'\n// \t\t\twidth='#{@canvasWidthScaled}'\n// \t\t\theight='#{@canvasHeightScaled}'>\n// \t\t</canvas>\n\n// \t\t<canvas data-hook='drawing-canvas' id='drawing-canvas' class='sketch-paper'\n// \t\t\twidth='#{@canvasWidthScaled}'\n// \t\t\theight='#{@canvasHeightScaled}'\n// \t\t\tstyle='height:#{@canvasHeight}px; width:#{@canvasWidth}px;'>\n// \t\t</canvas>\n\n// \t\t<canvas data-hook='buffer-canvas' id='buffer-canvas'  class='sketch-paper'\n// \t\t\twidth='#{@canvasWidthScaled}'\n// \t\t\theight='#{@canvasHeightScaled}'\n// \t\t\tstyle='height: #{@canvasHeight}px; width:#{@canvasWidth}px;'>\n// \t\t</canvas>\n\n// \t\t<canvas data-hook='cache-canvas' id='cache-canvas' class='sketch-paper'\n// \t\t\twidth='#{@canvasWidthScaled}'\n// \t\t\theight='#{@canvasHeightScaled}'>\n// \t\t</canvas>\n// \t\t\"\"\"\n\n// \tforegroundTemplate: -> \"\"\"\n// \t\t<div data-hook='foreground-image' id='foreground-image'\n// \t\t\tstyle='#{if @foregroundImage then 'background-image: url(' + @foregroundImage + ')' else ''}'>\n// \t\t</div>\n// \t\t\"\"\"\n\n// \tinteractionTemplate: -> \"\"\"\n// \t\t<div data-hook='interaction-layer' id='interaction-layer' class='interaction-layer' style='height: #{@height}px; width: #{@width}px'>\n// \t\t\t<div data-hook='sketch-tools' id='sketch-tools' style='height: #{@height}px; width: #{@width}px' unselectable=\"on\">\n// \t\t\t\t<div data-hook='sketch-swatches' id=\"sketch-swatches\"></div>\n// \t\t\t</div>\n// \t\t</div>\n// \t\t\"\"\"\n\n// \tinitialize: ->\n// \t\t@model = @model or new @app.SketchModel()\n\n// \t\t@scale = if window.devicePixelRatio >= 1.5 then 2 else 1\n\n// \t\t@drawUndo =\n// \t\t\ttransparentEraserFill: @drawTransparentFillFinal\n// \t\t\ttransparentEraserStroke: @drawStrokeFinal\n// \t\t\ttransparentColourFill: @drawTransparentFillFinal\n// \t\t\ttransparentColourStroke: @drawStrokeFinal\n// \t\t\topaqueEraserFill: @drawEraserUndoingFillFinal\n// \t\t\topaqueEraserStroke: @drawEraserUndoingFinal\n// \t\t\topaqueColourFill: @drawFillFinal\n// \t\t\topaqueColourStroke: @drawStrokeFinal\n// \t\t\topaqueBucket: @drawBucket\n// \t\t\ttransparentBucket: @drawBucket\n\n// \t\t@drawFinished =\n// \t\t\ttransparentEraserFill: @drawTransparentFillFinal\n// \t\t\ttransparentEraserStroke: @drawStrokeFinal\n// \t\t\ttransparentColourFill: @drawTransparentFillFinal\n// \t\t\ttransparentColourStroke: @drawStrokeFinal\n// \t\t\topaqueEraserFill: @drawEraserFillFinal\n// \t\t\topaqueEraserStroke: @drawEraser\n// \t\t\topaqueColourFill: @drawFillFinal\n// \t\t\topaqueColourStroke: @drawStrokeFinal\n// \t\t\topaqueBucket: @drawBucket\n// \t\t\ttransparentBucket: @drawBucket\n\n// \t\t@drawAnimation =\n// \t\t\ttransparentEraserFill: @drawFillAndStroke\n// \t\t\ttransparentEraserStroke: @drawFillAndStroke\n// \t\t\ttransparentColourFill: @drawFillAndStroke\n// \t\t\ttransparentColourStroke: @drawFillAndStroke\n// \t\t\topaqueEraserFill: @drawEraser\n// \t\t\topaqueEraserStroke: @drawEraser\n// \t\t\topaqueColourFill: @drawFillAndStroke\n// \t\t\topaqueColourStroke: @drawFillAndStroke\n\n// \t\t@calcLayout()\n\n// \tcalcLayout: ->\n// \t\t@$parentEl = $(@parentEl)\n\n// \t\tif @$parentEl.children().length > 0 and @position isnt 'absolute'\n// \t\t\tif @isInDom()\n// \t\t\t\toffsetTop = @$el.position().top\n// \t\t\telse\n// \t\t\t\t$lastChild = @$parentEl.children().last()\n// \t\t\t\toffsetTop = $lastChild.position().top + $lastChild.outerHeight() + parseInt($lastChild.css('margin-bottom'))\n// \t\telse\n// \t\t\toffsetTop = 0\n\n// \t\t@height = @$parentEl.outerHeight() - offsetTop\n// \t\t@width = @$parentEl.outerWidth()\n\n// \t\tif @height < @width / @ratio\n// \t\t\t@width = Math.floor(@height * @ratio)\n// \t\telse\n// \t\t\t@height = Math.floor(@width / @ratio)\n\n// \t\tif @hidePaper\n// \t\t\t@canvasWidth = @width\n// \t\t\t@canvasHeight = @height\n// \t\telse\n// \t\t\t@canvasWidth = Math.floor(@width * 0.9375)\n// \t\t\t@canvasHeight = Math.floor(@height * 0.9375)\n\n// \t\t@canvasWidthScaled = @canvasWidth * @scale\n// \t\t@canvasHeightScaled = @canvasHeight * @scale\n\n// \tupdateLayout: ->\n// \t\t@detachTools()\n\n// \t\t@calcLayout()\n\n// \t\t@$el.css\n// \t\t\theight: @height\n// \t\t\twidth: @width\n// \t\t\tleft: @left\n// \t\t\ttop: @top\n// \t\t\ttransform: @transform\n// \t\t\tposition: @position\n\n// \t\t@$('.sketch-paper').css\n// \t\t\theight: @canvasHeight\n// \t\t\twidth: @canvasWidth\n\n// \t\t@$('canvas.sketch-paper').attr\n// \t\t\theight: @canvasHeightScaled\n// \t\t\twidth: @canvasWidthScaled\n\n// \t\t@$interactionLayer.css\n// \t\t\theight: @height\n// \t\t\twidth: @width\n\n// \t\t@$sketchTools.css\n// \t\t\theight: @height\n// \t\t\twidth: @width\n\n// \t\t@resetOffset()\n\n// \t\t@setDrawingStyle(@model.getStyle(), @ctx['buffer'])\n\n// \t\t@importImage() if @importedImage\n\n// \t\t@drawExistingSketch()\n\n// \t\t@attachTools()\n\n// \tafterRender: ->\n// \t\t@openControlBar() if @showControlBar\n\n// \t\t@ctx =\n// \t\t\tcut: @$cutCanvas.get(0).getContext('2d')\n// \t\t\tdrawing: @$drawingCanvas.get(0).getContext('2d')\n// \t\t\tbuffer: @$bufferCanvas.get(0).getContext('2d')\n// \t\t\tcache: @$cacheCanvas.get(0).getContext('2d')\n\n// \t\t@setDrawingStyle(@model.getStyle(), @ctx['buffer'])\n\n// \t\tif @importedImage\n// \t\t\t@on 'sketch-image-loaded', => @drawExistingSketch()\n// \t\t\t@importImage()\n// \t\telse\n// \t\t\t@drawExistingSketch()\n\n// \tafterAttach: ->\n// \t\t@$sketchTools.hide() if @toolsHidden\n\n// \t\t@listenToAndRun @app, 'resize', => @updateLayout()\n\n// \tresetOffset: -> @offset = @$drawingCanvas.offset()\n\n// \topenControlBar: (animated = true) ->\n// \t\t@$controlBar.velocity {translateY: [0, '-100%']},\n// \t\t\tduration: if animated then 250 else 0\n// \t\t\tdisplay: 'block'\n\n// \thideControlBar: (animated = true) ->\n// \t\t@$controlBar.velocity {translateY: '-100%'},\n// \t\t\tduration: if animated then 250 else 0\n// \t\t\tdisplay: 'none'\n\n// \tdrawExistingSketch: ->\n// \t\tq = queue(1)\n\n// \t\tif @model.latestActionIndex > -1\n// \t\t\tfor action in @model.actions[0..@model.latestActionIndex]\n// \t\t\t\tdo (action) =>\n// \t\t\t\t\tif action.type is 'image'\n// \t\t\t\t\t\tq.defer (cb) => @drawImage(action.object, cb)\n// \t\t\t\t\telse\n// \t\t\t\t\t\tq.defer (cb) =>\n// \t\t\t\t\t\t\t@drawExistingStroke(action.object)\n// \t\t\t\t\t\t\tcb()\n\n// \tattachTools: ->\n// \t\t@tools = []\n\n// \t\t_.each SketchTools, (value, key) =>\n// \t\t\tif key isnt 'uploader' or @enableUploader\n// \t\t\t\toptions = _.extend\n// \t\t\t\t\tmodel: @model\n// \t\t\t\t\tscale: @scale\n// \t\t\t\t\tsketchView: @\n// \t\t\t\t\tname: key\n// \t\t\t\t\tdisabled: key in @disabledTools\n// \t\t\t\t, value\n\n// \t\t\t\ttoolView = new SketchToolView(options)\n\n// \t\t\t\t$container = if value.colour then @$sketchSwatches else @$sketchTools\n\n// \t\t\t\t@registerSubview(toolView)\n\n// \t\t\t\t$container.append(toolView.el)\n\n// \t\t\t\t@tools.push(toolView)\n\n// \t\t\t\t@listenTo(toolView, 'clicked-disabled', => @trigger('clicked-disabled'))\n\n// \tdetachTools: ->\n// \t\tif @tools\n// \t\t\ttool.remove() for tool in @tools\n\n// \tsetDrawingStyle: (style, ctx) ->\n// \t\tcolour = \"rgba(#{style.colour[0]}, #{style.colour[1]}, #{style.colour[2]}, #{style.opacity})\"\n// \t\tctx.strokeStyle = colour\n// \t\tctx.fillStyle = colour\n// \t\tctx.lineWidth = style.size\n// \t\tctx.lineJoin = \"round\"\n// \t\tctx.lineCap = \"round\"\n\n// \tstopEvent: (ev) ->\n// \t\tev.preventDefault()\n// \t\tev.stopPropagation()\n\n// \tstartTouchDrawing: (ev) ->\n// \t\tev.preventDefault() # prevent scroll\n// \t\t@startDrawing(@getTouchPoint(ev))\n\n// \tstartClickDrawing: (ev) ->\n// \t\tev.preventDefault() # prevent text selection cursor\n// \t\t@startDrawing(@getPoint(ev))\n\n// \tcontinueTouchDrawing: (ev) ->\n// \t\t@model.continueStroke(@getTouchPoint(ev))\n\n// \tcontinueClickDrawing: (ev) ->\n// \t\t# Making sure the UI has disappeared (problems on desktop otherwise)\n// \t\t@model.continueStroke(@getPoint(ev)) if @toolsTimeout is null\n\n// \tstartDrawing: (point) ->\n// \t\t@trigger('start_drawing')\n// \t\t# Can't start drawing if tools have not come back (prevent two fingers drawing)\n// \t\tif @toolsTimeout isnt null\n// \t\t\t@hideTools()\n// \t\t\tclearTimeout(@toolsTimeout)\n// \t\t\t@toolsTimeout = null\n\n// \t\t\t@model.initStroke(point)\n\n// \t\t\tif @model.currentStroke.style.eraser and @model.currentStroke.style.opacity is 1.0\n// \t\t\t\t@ctx['cache'].globalCompositeOperation = \"copy\"\n// \t\t\t\t@ctx['cache'].drawImage(@ctx['drawing'].canvas, 0, 0, @canvasWidthScaled, @canvasHeightScaled)\n// \t\t\t\t@setDrawingStyle(@model.currentStroke.style, @ctx['drawing'])\n\n// \t\t\t@setDrawingStyle(@model.currentStroke.style, @ctx['buffer'])\n// \t\t\t@strokeAnimation() if not @model.currentStroke.style.bucket\n\n// \tendDrawing: (ev) ->\n// \t\tif @toolsTimeout is null && (!ev.touches or ev.touches.length is 0)\n// \t\t\t@toolsTimeout = setTimeout((=> @showTools()), 450)\n// \t\t\t@endStrokeAnimation() if not @model.currentStroke.style.bucket\n// \t\t\t@ctx['buffer'].clearRect(0, 0, @canvasWidthScaled, @canvasHeightScaled)\n// \t\t\t@drawFinishedStroke(@model.currentStroke)\n// \t\t\t@model.saveStroke()\n// \t\t\t@trigger('change-drawing')\n\n// \tstrokeAnimation: ->\n// \t\t@drawAnimationStroke(@model.currentStroke)\n// \t\t@reqStroke = window.requestAnimationFrame(=> @strokeAnimation.apply(@))\n\n// \tdrawAnimationStroke: (stroke) ->\n// \t\t@drawAnimation[stroke.style.key].apply(@, [stroke])\n\n// \tendStrokeAnimation: ->\n// \t\twindow.cancelAnimationFrame(@reqStroke)\n// \t\t@reqStroke = 0\n\n// \tsameColour: (a, b) -> (a[3] is b[3] and a[2] is b[2] and a[1] is b[1] and a[0] is b[0])# or (b[3] > 5 and b[3] < 120)\n\n// \tgetIndex: (x, y) -> return (((y * @canvasWidthScaled) + x) * 4)\n\n// \t# Based on http://lodev.org/cgtutor/floodfill.html\n// \tbucket: (stroke, canvas) ->\n// \t\timageData = @ctx[canvas].getImageData(0, 0, @canvasWidthScaled, @canvasHeightScaled)\n// \t\tpix = imageData.data\n\n// \t\tp = { x: Math.round(stroke.points[0].s.x), y: Math.round(stroke.points[0].s.y) }\n// \t\ttoExplore = [p]\n// \t\ti = @getIndex(p.x, p.y)\n\n// \t\tspanLeft = false\n// \t\tspanRight = false\n// \t\ty = 0\n// \t\tyStep = @canvasWidthScaled * 4\n\n// \t\tstartColour = [pix[i], pix[i+1], pix[i+2], pix[i+3]]\n// \t\tbucketColour = stroke.style.colour.concat([255 * stroke.style.opacity])\n\n// \t\tif not @sameColour(startColour, bucketColour)\n// \t\t\twhile toExplore.length > 0\n// \t\t\t\tp = toExplore.pop()\n// \t\t\t\ti = @getIndex(p.x, p.y)\n\n// \t\t\t\ty = p.y\n// \t\t\t\tspanLeft = false\n// \t\t\t\tspanRight = false\n\n// \t\t\t\twhile y >= 0 and @sameColour(startColour, [pix[i], pix[i+1], pix[i+2], pix[i+3]])\n// \t\t\t\t\ty--\n// \t\t\t\t\ti -= yStep\n\n// \t\t\t\ty++\n// \t\t\t\ti += yStep\n\n// \t\t\t\twhile y < @canvasHeightScaled and @sameColour(startColour, [pix[i], pix[i+1], pix[i+2], pix[i+3]])\n// \t\t\t\t\t[pix[i], pix[i+1], pix[i+2], pix[i+3]] = bucketColour\n\n// \t\t\t\t\tif not spanLeft and p.x > 0 and @sameColour(startColour, [pix[i-4], pix[i-3], pix[i-2], pix[i-1]])\n// \t\t\t\t\t\ttoExplore.push(x: p.x - 1, y: y)\n// \t\t\t\t\t\tspanLeft = true\n// \t\t\t\t\telse if spanLeft and p.x > 0 and not @sameColour(startColour, [pix[i-4], pix[i-3], pix[i-2], pix[i-1]])\n// \t\t\t\t\t\tspanLeft = false\n\n// \t\t\t\t\tif not spanRight and p.x < @canvasWidthScaled - 1 and @sameColour(startColour, [pix[i+4], pix[i+5], pix[i+6], pix[i+7]])\n// \t\t\t\t\t\ttoExplore.push(x: p.x + 1, y: y)\n// \t\t\t\t\t\tspanRight = true\n// \t\t\t\t\telse if spanRight and p.x < @canvasWidthScaled - 1 and not @sameColour(startColour, [pix[i+4], pix[i+5], pix[i+6], pix[i+7]])\n// \t\t\t\t\t\tspanRight = false\n\n// \t\t\t\t\ty++\n// \t\t\t\t\ti += yStep\n\n// \t\t\t@ctx[canvas].putImageData(imageData, 0, 0)\n\n// \ttrace: (stroke, ctx) ->\n// \t\tnbPoints = stroke.length()\n\n// \t\tctx.beginPath()\n\n// \t\tif nbPoints < 3\n// \t\t\tctx.moveTo(stroke.points[0].s.x, stroke.points[0].s.y)\n// \t\t\tctx.lineTo(stroke.points[nbPoints-1].s.x+0.001, stroke.points[nbPoints-1].s.y+0.001)\n// \t\telse\n// \t\t\tctx.moveTo(stroke.points[0].s.x, stroke.points[0].s.y)\n// \t\t\tfor move in stroke.points[1..nbPoints-2]\n// \t\t\t\tctx.quadraticCurveTo(move.s.x, move.s.y, move.h.x, move.h.y)\n\n// \t\treturn true\n\n// \tdrawUndoStroke: (stroke) ->\n// \t\t@setDrawingStyle(stroke.style, @ctx['drawing'])\n// \t\t@drawUndo[stroke.style.key].apply(@, [stroke])\n\n// \tdrawFinishedStroke: (stroke) ->\n// \t\t@setDrawingStyle(stroke.style, @ctx['drawing'])\n// \t\t@drawFinished[stroke.style.key].apply(@, [stroke])\n\n// \tdrawExistingStroke: (stroke) ->\n// \t\t@setDrawingStyle(stroke.style, @ctx['drawing'])\n// \t\t@drawFinished[stroke.style.key].apply(@, [stroke, false])\n\n// \thideTools: (animated = true, callback = ->) ->\n// \t\tduration = if animated then 250 else 0\n// \t\tscale = if animated then 1.5 else [1.5, 1.5]\n\n// \t\tsetTimeout =>\n// \t\t\t@$sketchTools.velocity('stop').velocity(scale: scale, duration, callback)\n// \t\t, 1\n\n// \tshowTools: (animated = true) ->\n// \t\tduration = if animated then 250 else 0\n// \t\tscale = if animated then [1, 1.5] else [1, 1]\n\n// \t\t@$sketchTools.velocity(scale: [1, 1.5], { display: 'block', duration: duration, complete: => @trigger('stop') })\n\n// \thideBlueprint: ->\n// \t\t@$(\"#blueprint\").hide()\n\n// \tshowBlueprint: -> @$(\"#blueprint\").show()\n\n// \tgetPoint: (ev) ->\n// \t\tx: (ev.pageX - @offset.left) * @scale\n// \t\ty: (ev.pageY - @offset.top) * @scale\n\n// \tgetTouchPoint: (ev) ->\n// \t\tx: (ev.touches[0].pageX - @offset.left) * @scale\n// \t\ty: (ev.touches[0].pageY - @offset.top) * @scale\n\n// \timportImage: (importedImage = null, callback = ->) ->\n// \t\treturn unless @importedImage or importedImage\n\n// \t\t@importedImage or= importedImage\n\n// \t\tif @importedImage instanceof Image\n// \t\t\t@ctx['drawing'].globalCompositeOperation = \"copy\"\n// \t\t\t@ctx['drawing'].drawImage(@importedImage, 0, 0, @canvasWidthScaled, @canvasHeightScaled)\n\n// \t\telse\n// \t\t\timageUrl = @importedImage\n// \t\t\t@importedImage = new Image()\n\n// \t\t\t@importedImage.onload = =>\n// \t\t\t\t@ctx['drawing'].globalCompositeOperation = \"copy\"\n// \t\t\t\t@ctx['drawing'].drawImage(@importedImage, 0, 0, @canvasWidthScaled, @canvasHeightScaled)\n\n// \t\t\t\t@trigger('sketch-image-loaded')\n// \t\t\t\tcallback()\n\n// \t\t\t@importedImage.src = imageUrl\n\n// \tundo: ->\n// \t\tif @model.canUndo()\n// \t\t\t@model.latestActionIndex--\n\n// \t\t\t@ctx['drawing'].clearRect(0, 0, @canvasWidthScaled, @canvasHeightScaled)\n\n// \t\t\t@importImage()\n\n// \t\t\tif @model.latestActionIndex > -1\n// \t\t\t\tq = queue(1)\n\n// \t\t\t\tfor action in @model.actions[0..@model.latestActionIndex]\n// \t\t\t\t\tdo (action) =>\n// \t\t\t\t\t\tif action.type is 'image'\n// \t\t\t\t\t\t\tq.defer (cb) =>\n// \t\t\t\t\t\t\t\t@drawImage(action.object, cb)\n// \t\t\t\t\t\telse\n// \t\t\t\t\t\t\tq.defer (cb) =>\n// \t\t\t\t\t\t\t\t@drawUndoStroke(action.object)\n// \t\t\t\t\t\t\t\tcb()\n\n// \t\t\t@trigger('change-drawing')\n\n// \t\t\treturn true\n\n// \tredo: ->\n// \t\tif @model.canRedo()\n// \t\t\t@model.latestActionIndex++\n\n// \t\t\taction = @model.actions[@model.latestActionIndex]\n\n// \t\t\tif action.type is 'image'\n// \t\t\t\t@drawImage action.object, =>\n// \t\t\t\t\t@trigger('change-drawing')\n// \t\t\telse\n// \t\t\t\t@drawUndoStroke(action.object)\n// \t\t\t\t@trigger('change-drawing')\n\n// \trestart: ->\n// \t\t@model.reset()\n\n// \t\t@ctx['drawing'].clearRect(0, 0, @canvasWidthScaled, @canvasHeightScaled)\n\n// \t\t@trigger('change-drawing')\n\n// \t\t@importImage()\n\n// \tflashInfo: (message) ->\n// \t\t$wrapper = @$('.tool-toggle-popup-wrapper')\n\n// \t\tif $wrapper\n// \t\t\t$wrapper.velocity('stop', true)\n// \t\t\t$wrapper.remove()\n\n// \t\t$wrapper = $('<div class=\"tool-toggle-popup-wrapper\"></div>')\n// \t\t\t.appendTo(@$interactionLayer)\n\n// \t\t$(\"<div class='tool-toggle-popup'></div>\")\n// \t\t\t.html(message)\n// \t\t\t.appendTo($wrapper)\n// \t\t\t.velocity(opacity: [1, 0], 150)\n// \t\t\t.velocity {opacity: [0, 1]},\n// \t\t\t\tdelay: 1250\n// \t\t\t\tcomplete: -> $wrapper.remove()\n\n// \tgetDrawing: -> @$drawingCanvas.get(0).toDataURL()\n\n// \t# drawTransparentFillFinal_drawTransparentEraserFillFinal\n// \tdrawTransparentFillFinal: (stroke) ->\n// \t\t@ctx['cache'].clearRect(0, 0, @canvasWidthScaled, @canvasHeightScaled)\n// \t\t@ctx['cache'].globalCompositeOperation = \"source-over\"\n// \t\t@setDrawingStyle(_.defaults(opacity: 1, stroke.style), @ctx['cache'])\n// \t\t@trace(stroke, @ctx['cache'])\n// \t\t@ctx['cache'].closePath()\n// \t\t@ctx['cache'].fill()\n// \t\t@ctx['cache'].stroke()\n\n// \t\t@ctx['drawing'].globalCompositeOperation = \"source-over\"\n// \t\t@ctx['drawing'].globalAlpha = stroke.style.opacity\n// \t\t@ctx['drawing'].drawImage(@ctx['cache'].canvas, 0, 0, @canvasWidthScaled, @canvasHeightScaled)\n// \t\t@ctx['drawing'].globalAlpha = 1.0\n\n// \t# drawTransparentStrokeFinal_drawTransparentEraserFinal_drawStrokeFinal\n// \tdrawStrokeFinal: (stroke) ->\n// \t\t@ctx['drawing'].globalCompositeOperation = \"source-over\"\n// \t\t@trace(stroke, @ctx['drawing'])\n// \t\t@ctx['drawing'].stroke()\n\n// \t# drawBucket\n// \tdrawBucket: (stroke) ->\n// \t\t@ctx['drawing'].globalCompositeOperation = \"source-over\"\n// \t\t@bucket(stroke, \"drawing\")\n\n// \t# drawFillFinal\n// \tdrawFillFinal: (stroke) ->\n// \t\t@ctx['drawing'].globalCompositeOperation = \"source-over\"\n// \t\t@trace(stroke, @ctx['drawing'])\n// \t\t@ctx['drawing'].closePath()\n// \t\t@ctx['drawing'].fill()\n// \t\t@ctx['drawing'].stroke()\n\n// \t# drawTransparentFill_drawTransparentEraserFill_drawTransparentStroke_drawTransparentEraser_drawStroke_drawFill\n// \tdrawFillAndStroke: (stroke) ->\n// \t\t# TODO: REPLACE THIS BY 'COPY'\n// \t\t@ctx['buffer'].clearRect(0, 0, @canvasWidthScaled, @canvasHeightScaled)\n// \t\t@trace(stroke, @ctx['buffer'])\n// \t\t@ctx['buffer'].stroke()\n\n// \t# drawEraserUndoingFinal\n// \tdrawEraserUndoingFinal: (stroke) ->\n// \t\t@ctx['drawing'].globalCompositeOperation = \"destination-out\"\n// \t\t@trace(stroke, @ctx['drawing'])\n// \t\t@ctx['drawing'].stroke()\n\n// \t# drawEraserUndoingFillFinal\n// \tdrawEraserUndoingFillFinal: (stroke) ->\n// \t\t@ctx['drawing'].globalCompositeOperation = \"destination-out\"\n// \t\t@trace(stroke, @ctx['drawing'])\n// \t\t@ctx['drawing'].closePath()\n// \t\t@ctx['drawing'].fill()\n// \t\t@ctx['drawing'].stroke()\n\n// \t# drawEraser_drawEraserFinal_drawEraserFill\n// \tdrawEraser: (stroke, copy = true) ->\n// \t\tif copy\n// \t\t\t@ctx['drawing'].globalCompositeOperation = \"copy\"\n// \t\t\t@ctx['drawing'].drawImage(@ctx['cache'].canvas, 0, 0, @canvasWidthScaled, @canvasHeightScaled)\n\n// \t\t@ctx['drawing'].globalCompositeOperation = \"destination-out\"\n// \t\t@trace(stroke, @ctx['drawing'])\n// \t\t@ctx['drawing'].stroke()\n\n// \t# drawEraserFillFinal\n// \tdrawEraserFillFinal: (stroke, copy = true) ->\n// \t\tif copy\n// \t\t\t@ctx['drawing'].globalCompositeOperation = \"copy\"\n// \t\t\t@ctx['drawing'].drawImage(@ctx['cache'].canvas, 0, 0, @canvasWidthScaled, @canvasHeightScaled)\n\n// \t\t@ctx['drawing'].globalCompositeOperation = \"destination-out\"\n// \t\t@trace(stroke, @ctx['drawing'])\n// \t\t@ctx['drawing'].closePath()\n// \t\t@ctx['drawing'].fill()\n// \t\t@ctx['drawing'].stroke()\n\n// \taddImage: (image, callback) ->\n// \t\t@model.saveImage(image)\n// \t\t@drawImage(image, callback)\n// \t\t@trigger(\"change-drawing\")\n\n// \tdrawImage: (image, callback) ->\n// \t\timg = new Image()\n\n// \t\timg.onload = =>\n// \t\t\t@ctx['drawing'].globalCompositeOperation = \"source-over\"\n// \t\t\t@ctx['drawing'].drawImage(img, image.dx * @canvasWidthScaled, image.dy * @canvasHeightScaled, image.dw * @canvasWidthScaled, image.dh * @canvasHeightScaled)\n\n// \t\t\tcallback?()\n\n// \t\timg.src = image.url\n\n// \tgetCut: ->\n// \t\tbox = @findBoundingBox()\n\n// \t\t@$cutCanvas.attr(width: box.width, height: box.height)\n\n// \t\t@ctx['cut'].globalCompositeOperation = 'copy'\n\n// \t\t@ctx['cut'].drawImage(@ctx['drawing'].canvas, box.topLeftX, box.topLeftY, box.width, box.height, 0, 0, box.width, box.height)\n\n// \t\timage = @$cutCanvas.get(0).toDataURL()\n\n// \t\t@$cutCanvas.remove()\n\n// \t\treturn image\n\n// \tfindBoundingBox: (canvas = 'drawing') ->\n// \t\timageData = @ctx[canvas].getImageData(0, 0, @canvasWidthScaled, @canvasHeightScaled)\n\n// \t\tbox =\n// \t\t\ttopLeftX: @canvasWidthScaled\n// \t\t\ttopLeftY: @canvasHeightScaled\n// \t\t\tbottomRightX: 0\n// \t\t\tbottomRightY: 0\n\n// \t\tfor x in [0..@canvasWidthScaled]\n// \t\t\tfor y in [0.. @canvasHeightScaled]\n// \t\t\t\tpixelPosition = (((y * @canvasWidthScaled) + x) * 4) + 3\n\n// \t\t\t\tif imageData.data[pixelPosition] > 0\n// \t\t\t\t\tbox.topLeftX = x if x < box.topLeftX\n// \t\t\t\t\tbox.topLeftY = y if y < box.topLeftY\n// \t\t\t\t\tbox.bottomRightX = x if x > box.bottomRightX\n// \t\t\t\t\tbox.bottomRightY = y if y > box.bottomRightY\n\n// \t\tbox.width = box.bottomRightX - box.topLeftX\n// \t\tbox.height = box.bottomRightY - box.topLeftY\n\n// \t\treturn box\n","import NZKSketch from './nzk-sketch'\n\nconst example = () => {\n  new NZKSketch(document.getElementById('sketch-container'))\n}\n\nexport default example"],"names":["NZKSketch","props","containerEl","Error","template","scale","window","devicePixelRatio","console","log","this","initTouchLayer","touchLayerEl","document","createElement","style","width","height","onStartMouseDraw","bind","onMoveMouseDraw","onEndMouseDraw","addEventListener","onStartTouchDraw","onMoveTouchDraw","onEndTouchDraw","appendChild","ev","rect","getBoundingClientRect","x","clientX","left","y","clientY","top","touches","preventDefault","startDraw","getMousePoint","getTouchPoint","continueDraw","endDraw","point","getElementById"],"mappings":"+VAAqBA,8BACPC,yDAAQ,4GACdA,EAAMC,kBACF,IAAIC,MAAM,8DAGbD,YAAcD,EAAMC,iBACpBE,SAAWH,EAAMG,cAEjBC,MAAQC,OAAOC,kBAAoB,IAAM,EAAI,EAElDC,QAAQC,IAAIC,WAEPC,sFAIAC,aAAeC,SAASC,cAAc,YAEtCF,aAAaG,MAAMC,MAAQ,YAC3BJ,aAAaG,MAAME,OAAS,YAE5BC,iBAAmBR,KAAKQ,iBAAiBC,KAAKT,WAC9CU,gBAAkBV,KAAKU,gBAAgBD,KAAKT,WAC5CW,eAAiBX,KAAKW,eAAeF,KAAKT,WAE1CE,aAAaU,iBAAiB,YAAaZ,KAAKQ,kBAAkB,QAClEN,aAAaU,iBAAiB,YAAaZ,KAAKU,iBAAiB,QACjER,aAAaU,iBAAiB,UAAWZ,KAAKW,gBAAgB,QAE9DE,iBAAmBb,KAAKa,iBAAiBJ,KAAKT,WAC9Cc,gBAAkBd,KAAKc,gBAAgBL,KAAKT,WAC5Ce,eAAiBf,KAAKe,eAAeN,KAAKT,WAE1CE,aAAaU,iBAAiB,aAAcZ,KAAKa,kBAAkB,QACnEX,aAAaU,iBAAiB,YAAaZ,KAAKc,iBAAiB,QACjEZ,aAAaU,iBAAiB,WAAYZ,KAAKe,gBAAgB,QAE/DvB,YAAYwB,YAAYhB,KAAKE,oDAGrBe,OACTC,EAAOlB,KAAKE,aAAaiB,8BAEtB,CACLC,GAAIH,EAAGI,QAAUH,EAAKI,MAAQtB,KAAKL,MACnC4B,GAAIN,EAAGO,QAAUN,EAAKO,KAAOzB,KAAKL,6CAIvBsB,OACTC,EAAOlB,KAAKE,aAAaiB,8BAEtB,CACLC,GAAIH,EAAGS,QAAQ,GAAGL,QAAUH,EAAKI,MAAQtB,KAAKL,MAC9C4B,GAAIN,EAAGS,QAAQ,GAAGF,QAAUN,EAAKO,KAAOzB,KAAKL,gDAIhCsB,GACfA,EAAGU,sBACEC,UAAU5B,KAAK6B,cAAcZ,6CAGnBA,GACfA,EAAGU,sBACEC,UAAU5B,KAAK8B,cAAcb,4CAGpBA,QACTc,aAAa/B,KAAK6B,cAAcZ,4CAGvBA,QACTc,aAAa/B,KAAK8B,cAAcb,2CAGxBA,QACRe,QAAQhC,KAAK6B,cAAcZ,2CAGnBA,QACRe,QAAQhC,KAAK8B,cAAcb,sCAGxBgB,GACRnC,QAAQC,IAAI,iBAAkBkC,wCAGnBA,GACXnC,QAAQC,IAAI,oBAAqBkC,mCAG3BA,GACNnC,QAAQC,IAAI,eAAgBkC,+CC5FhB,eACV3C,EAAUa,SAAS+B,eAAe"}